#!/bin/bash

set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

MIRRORLIST_URL="https://www.archlinux.org/mirrorlist/?country=GB&protocol=https&use_mirror_status=on"

pacman -Sy --noconfirm pacman-contrib

echo "Updating mirror list"
curl -s "$MIRRORLIST_URL" | \
    sed -e 's/^#Server/Server/' -e '/^#/d' | \
    rankmirrors -n 5 - > /etc/pacman.d/mirrorlist

### Get infomation from user ###
hostname=$(dialog --stdout --inputbox "Enter hostname for new install" 0 0) || exit 1
clear
: ${hostname:?"hostname cannot be empty"}

user=$(dialog --stdout --inputbox "Enter admin username (other than root)" 0 0) || exit 1
clear
: ${user:?"user cannot be empty"}

password=$(dialog --stdout --passwordbox "Enter admin password" 0 0) || exit 1
clear
: ${password:?"password cannot be empty"}
password2=$(dialog --stdout --passwordbox "Enter admin password again" 0 0) || exit 1
clear
[[ "$password" == "$password2" ]] || ( echo "Passwords did not match"; exit 1; )

rpassword=$(dialog --stdout --passwordbox "Enter root password" 0 0) || exit 1
clear
: ${password:?"password cannot be empty"}
rpassword2=$(dialog --stdout --passwordbox "Enter root password again" 0 0) || exit 1
clear
[[ "$password" == "$password2" ]] || ( echo "Passwords did not match"; exit 1; )

devicelist=$(lsblk -dplnx size -o name,size | grep -Ev "boot|rpmb|loop" | tac)
device=$(dialog --stdout --menu "Select installtion disk (multi-disk install not supported)" 0 0 0 ${devicelist}) || exit 1
clear

### Set up logging ###
exec 1> >(tee "stdout.log")
exec 2> >(tee "stderr.log")

timedatectl set-ntp true

# -- Setup the disk and partitions -- #
sgdisk -Z ${device}
sgdisk -g ${device}

# Create the ESP
sgdisk -n 1:0:+1G -t 1:ef00 ${device}

# v !!! THIS IS W/O ENCRYPTION SO FAR v !!! #

# ZFS: one filesystem to rule them all
sgdisk -n 2:0:0 -t 2:bf00 ${device}

# ^ !!! THIS IS W/O ENCRYPTION SO FAR ^ !!! #

# Prepare filesystems
part_boot="$(ls ${device}* | grep -E "^${device}p?1$")"
part_root="$(ls ${device}* | grep -E "^${device}p?2$")"
wipefs "${part_boot}"
wipefs "${part_root}"
mkfs.vfat -F32 "${part_boot}"

zpool create -f -m none -R /mnt -o feature@encryption=enabled rpool ${part_root}
zfs create rpool/sys
zfs create rpool/sys/arch
zfs create rpool/sys/arch/ROOT
zfs create -o mountpoint=/ rpool/sys/arch/ROOT/default
zpool set bootfs=rpool/sys/arch/ROOT/default rpool
zfs create rpool/common
zfs create -o mountpoint=/home rpool/common/home
zfs create -o mountpoint=/home/${user} rpool/common/home/${user}
zfs create -o mountpoint=/root rpool/common/home/root
zfs create -o mountpoint=/var/lib/abe rpool/common/home/abe
zfs create -o mountpoint=/var/lib/lxc rpool/common/lxc
zfs create -o mountpoint=/var/lib/machines rpool/common/machines
zfs create -o mountpoint=/var/lib/vmail rpool/common/vmail
zfs create -o mountpoint=/var/lib/filter rpool/common/filter
zfs create -o mountpoint=/var/lib/dav rpool/common/dav
zfs create -o mountpoint=/var/lib/lightdm rpool/common/lightdm
zfs create -o mountpoint=/var/lib/postfix rpool/common/postfix
zfs create -o mountpoint=/var/lib/caddy rpool/common/caddy
zfs create -o mountpoint=/var/lib/aurbuild rpool/common/aurbuild
zfs create -o mountpoint=/var/cache/AUR rpool/common/AUR

zfs unmount -a
zpool export -a
zpool import -R /mnt rpool
mkdir -p /mnt/boot
mount "${part_boot}" /mnt/boot

# -- Install and configure the basic system -- #

# Bare essentials - make the chroot boot
cat pkglist | pacstrap -c /mnt -
genfstab -t PARTUUID -f "/boot" /mnt >> /mnt/etc/fstab
echo "${hostname}" > /mnt/etc/hostname
arch-chroot /mnt bootctl install

cat <<EOF > /mnt/boot/loader/loader.conf
default arch
timeout 3
EOF

cat <<EOF > /mnt/boot/loader/entries/arch.conf
title    Arch Linux
linux    /vmlinuz-linux
initrd   /initramfs-linux.img
options  root=zfs:bootfs rw
EOF

cat <<EOF > /mnt/boot/loader/entries/arch-lts.conf
title    Arch Linux (LTS)
linux    /vmlinuz-linux-lts
initrd   /initramfs-linux-lts.img
options  root=zfs:bootfs rw
EOF

echo "LANG=en_US.UTF-8" > /mnt/etc/locale.conf
arch-chroot /mnt locale-gen

# Set up skel, useradd, xdg, and other defaults

rm -f /mnt/etc/skel/{.bashrc,.bash_history,.bash_logout}
mkdir -p /mnt/etc/skel/.config
mkdir -p /mnt/etc/skel/.local/bin
mkdir -p /mnt/etc/skel/.local/scripts

sed --in-place "/enabled.*/enabled=False" /mnt/etc/xdg/user-dirs.conf

cat <<EOF > /mnt/etc/xdg/user-dirs.defaults
DESKTOP=.desktop
DOWNLOAD=downloads
TEMPLATES=.templates
PUBLICSHARE=.public
DOCUMENTS=documents
MUSIC=media/music
PICTURES=media/pictures
VIDEOS=media/videos
EOF

cat <<EOF > /mnt/etc/skel/.config/user-dirs.dirs
XDG_DESKTOP_DIR="$HOME/.desktop"
XDG_DOCUMENTS_DIR="$HOME/documents"
XDG_DOWNLOAD_DIR="$HOME/downloads"
XDG_MUSIC_DIR="$HOME/media/music"
XDG_PICTURES_DIR="$HOME/media/photos"
XDG_PUBLICSHARE_DIR="$HOME/.public"
XDG_TEMPLATES_DIR="$HOME/.templates"
XDG_VIDEOS_DIR="$HOME/media/videos"
EOF

cat <<EOF > /mnt/etc/skel/.zsh.local
# Add changes to global defaults here

# If not interactive then exit
[[ $- != *i* ]] && return

# Environment variables
export EDITOR=nvim
export AUR_PAGER=ranger

# Aliases
alias vim=nvim
EOF

cat <<EOF > /mnt/etc/profile.d/user.sh
if [[ $UID -ge 1000 && -d $HOME/bin && -z $(echo $PATH | grep -o $HOME/bin) ]]
then
	    export PATH="$HOME/bin:${PATH}"
fi

if [[ $UID -ge 1000 && -d $HOME/.local/bin && -z $(echo $PATH | grep -o $HOME/.local/bin) ]]
then
	    export PATH="$HOME/.local/bin:${PATH}"
fi

if [[ $UID -ge 1000 && -d $HOME/.local/scripts && -z $(echo $PATH | grep -o $HOME/.local/scripts) ]]
then
	    export PATH="$HOME/.local/scripts:${PATH}"
fi
EOF

sed --in-place "s/DEFAULT_HOME.*/DEFAULT_HOME yes/" /mnt/etc/login.defs
if [[ $(cat /etc/login.defs | grep -e CREATE_HOME) ]] then
	sed --in-place "s/CREATE_HOME.*/CREATE_HOME no" /mnt/etc/login.defs
else
	echo "\n# Whether or not user HOME is created by default\nCREATE_HOME no" >> /mnt/etc/login.defs
fi

cat <<EOF > /mnt/etc/default/useradd
GROUP=users
HOME=/home
INACTIVE=-1
EXPIRE=
SHELL=/bin/zsh
SKEL=/etc/skel
CREATE_MAIL_SPOOL=no
EOF

# Create admin and all required system users
arch-chroot /mnt useradd -rM -b /var/lib -s /bin/nologin abe
arch-chroot /mnt useradd -MU -s /usr/bin/zsh -G wheel,video,audio,vboxusers,libvirt,kvm,realtime "$user"

# Install AUR packages with dedicated user
mkdir -p /mnt/var/cache/AUR/pkg

arch-chroot /mnt sudo -u abe gpg --recv-keys DBE7D3DD8C81D58D0A13D0E76BC26A17B9B7018A
arch-chroot /mnt sudo -u abe ( cd /var/lib/abe ; curl -L https://aur.archlinux.org/cgit/aur.git/snapshot/aurutils.tar.gz | tar xz )
arch-chroot /mnt sudo -u abe ( cd /var/lib/abe/aurutils ; BUILDDIR=. PKGDEST=/var/cache/AUR/pkg makepkg -rc ) && rm -rf aurutils
arch-chroot /mnt repo-add /var/cache/AUR/pkg/aur.db.tar

cat <<EOF > /mnt/etc/pacman.d/aur
[options]
CacheDir = /var/cache/pacman/pkg
CacheDir = /var/cache/AUR/pkg
CleanMethod = KeepCurrent

[aur]
SigLevel = Optional TrustAll
Server = file:///var/cache/AUR/pkg
EOF

echo "\nInclude = /etc/pacmand.d/aur" >> /etc/pacman.conf

cp aurlist /mnt/root/aurlist
arch-chroot /mnt cat aurlist | sudo -u abe aur sync -nu -

# Fix mkinicpio & rebuild
sed --in-place "s/MODULES=(*)/MODULES=(zfs)" /mnt/etc/mkinitcpio.conf 
sed --in-place "s/HOOKS=(*)/HOOKS=(base systemd autodetect keyboard sd-vconsole modconf block sd-encrypt sd-zfs sd-zfs-shutdown fsck)" /mnt/etc/mkinitcpio.conf 
mkinitcpio -P

# Make password change from archiso since zsh_history is ephemeral
echo "$user:$password" | chpasswd --root /mnt
echo "root:$rpassword" | chpasswd --root /mnt

# Clean up
umount ${device}*
zfs unmount -a
zpool export -a
